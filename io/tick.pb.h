// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tick.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tick_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tick_2eproto

#define PROTOBUF_USE_DLLS

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tick_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tick_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tick_2eproto;
namespace dat {
class TickData;
struct TickDataDefaultTypeInternal;
extern TickDataDefaultTypeInternal _TickData_default_instance_;
}  // namespace dat
PROTOBUF_NAMESPACE_OPEN
template<> ::dat::TickData* Arena::CreateMaybeMessage<::dat::TickData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dat {

// ===================================================================

class TickData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dat.TickData) */ {
 public:
  inline TickData() : TickData(nullptr) {}
  ~TickData() override;
  explicit constexpr TickData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TickData(const TickData& from);
  TickData(TickData&& from) noexcept
    : TickData() {
    *this = ::std::move(from);
  }

  inline TickData& operator=(const TickData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickData& operator=(TickData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TickData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TickData* internal_default_instance() {
    return reinterpret_cast<const TickData*>(
               &_TickData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TickData& a, TickData& b) {
    a.Swap(&b);
  }
  inline void Swap(TickData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TickData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TickData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TickData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TickData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dat.TickData";
  }
  protected:
  explicit TickData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingDayFieldNumber = 1,
    kInstrumentIDFieldNumber = 2,
    kExchangeIDFieldNumber = 3,
    kExchangeInstIDFieldNumber = 4,
    kUpdateTimeFieldNumber = 21,
    kActionDayFieldNumber = 45,
    kLastPriceFieldNumber = 5,
    kPreSettlementPriceFieldNumber = 6,
    kPreClosePriceFieldNumber = 7,
    kPreOpenInterestFieldNumber = 8,
    kOpenPriceFieldNumber = 9,
    kHighestPriceFieldNumber = 10,
    kLowestPriceFieldNumber = 11,
    kVolumeFieldNumber = 12,
    kTurnoverFieldNumber = 13,
    kOpenInterestFieldNumber = 14,
    kClosePriceFieldNumber = 15,
    kSettlementPriceFieldNumber = 16,
    kUpperLimitPriceFieldNumber = 17,
    kLowerLimitPriceFieldNumber = 18,
    kPreDeltaFieldNumber = 19,
    kCurrDeltaFieldNumber = 20,
    kUpdateMillisecFieldNumber = 22,
    kBidPrice1FieldNumber = 23,
    kBidVolume1FieldNumber = 24,
    kAskPrice1FieldNumber = 25,
    kAskVolume1FieldNumber = 26,
    kBidPrice2FieldNumber = 27,
    kBidVolume2FieldNumber = 28,
    kAskPrice2FieldNumber = 29,
    kAskVolume2FieldNumber = 30,
    kBidPrice3FieldNumber = 31,
    kBidVolume3FieldNumber = 32,
    kAskPrice3FieldNumber = 33,
    kAskVolume3FieldNumber = 34,
    kBidPrice4FieldNumber = 35,
    kBidVolume4FieldNumber = 36,
    kAskPrice4FieldNumber = 37,
    kAskVolume4FieldNumber = 38,
    kBidPrice5FieldNumber = 39,
    kBidVolume5FieldNumber = 40,
    kAskPrice5FieldNumber = 42,
    kAskVolume5FieldNumber = 43,
    kAveragePriceFieldNumber = 44,
  };
  // string TradingDay = 1;
  void clear_tradingday();
  const std::string& tradingday() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradingday(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradingday();
  PROTOBUF_NODISCARD std::string* release_tradingday();
  void set_allocated_tradingday(std::string* tradingday);
  private:
  const std::string& _internal_tradingday() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradingday(const std::string& value);
  std::string* _internal_mutable_tradingday();
  public:

  // string InstrumentID = 2;
  void clear_instrumentid();
  const std::string& instrumentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrumentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrumentid();
  PROTOBUF_NODISCARD std::string* release_instrumentid();
  void set_allocated_instrumentid(std::string* instrumentid);
  private:
  const std::string& _internal_instrumentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrumentid(const std::string& value);
  std::string* _internal_mutable_instrumentid();
  public:

  // string ExchangeID = 3;
  void clear_exchangeid();
  const std::string& exchangeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchangeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchangeid();
  PROTOBUF_NODISCARD std::string* release_exchangeid();
  void set_allocated_exchangeid(std::string* exchangeid);
  private:
  const std::string& _internal_exchangeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchangeid(const std::string& value);
  std::string* _internal_mutable_exchangeid();
  public:

  // string ExchangeInstID = 4;
  void clear_exchangeinstid();
  const std::string& exchangeinstid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchangeinstid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchangeinstid();
  PROTOBUF_NODISCARD std::string* release_exchangeinstid();
  void set_allocated_exchangeinstid(std::string* exchangeinstid);
  private:
  const std::string& _internal_exchangeinstid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchangeinstid(const std::string& value);
  std::string* _internal_mutable_exchangeinstid();
  public:

  // string UpdateTime = 21;
  void clear_updatetime();
  const std::string& updatetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updatetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updatetime();
  PROTOBUF_NODISCARD std::string* release_updatetime();
  void set_allocated_updatetime(std::string* updatetime);
  private:
  const std::string& _internal_updatetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatetime(const std::string& value);
  std::string* _internal_mutable_updatetime();
  public:

  // string ActionDay = 45;
  void clear_actionday();
  const std::string& actionday() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_actionday(ArgT0&& arg0, ArgT... args);
  std::string* mutable_actionday();
  PROTOBUF_NODISCARD std::string* release_actionday();
  void set_allocated_actionday(std::string* actionday);
  private:
  const std::string& _internal_actionday() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actionday(const std::string& value);
  std::string* _internal_mutable_actionday();
  public:

  // float LastPrice = 5;
  void clear_lastprice();
  float lastprice() const;
  void set_lastprice(float value);
  private:
  float _internal_lastprice() const;
  void _internal_set_lastprice(float value);
  public:

  // float PreSettlementPrice = 6;
  void clear_presettlementprice();
  float presettlementprice() const;
  void set_presettlementprice(float value);
  private:
  float _internal_presettlementprice() const;
  void _internal_set_presettlementprice(float value);
  public:

  // float PreClosePrice = 7;
  void clear_precloseprice();
  float precloseprice() const;
  void set_precloseprice(float value);
  private:
  float _internal_precloseprice() const;
  void _internal_set_precloseprice(float value);
  public:

  // float PreOpenInterest = 8;
  void clear_preopeninterest();
  float preopeninterest() const;
  void set_preopeninterest(float value);
  private:
  float _internal_preopeninterest() const;
  void _internal_set_preopeninterest(float value);
  public:

  // float OpenPrice = 9;
  void clear_openprice();
  float openprice() const;
  void set_openprice(float value);
  private:
  float _internal_openprice() const;
  void _internal_set_openprice(float value);
  public:

  // float HighestPrice = 10;
  void clear_highestprice();
  float highestprice() const;
  void set_highestprice(float value);
  private:
  float _internal_highestprice() const;
  void _internal_set_highestprice(float value);
  public:

  // float LowestPrice = 11;
  void clear_lowestprice();
  float lowestprice() const;
  void set_lowestprice(float value);
  private:
  float _internal_lowestprice() const;
  void _internal_set_lowestprice(float value);
  public:

  // int32 Volume = 12;
  void clear_volume();
  int32_t volume() const;
  void set_volume(int32_t value);
  private:
  int32_t _internal_volume() const;
  void _internal_set_volume(int32_t value);
  public:

  // double Turnover = 13;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double OpenInterest = 14;
  void clear_openinterest();
  double openinterest() const;
  void set_openinterest(double value);
  private:
  double _internal_openinterest() const;
  void _internal_set_openinterest(double value);
  public:

  // float ClosePrice = 15;
  void clear_closeprice();
  float closeprice() const;
  void set_closeprice(float value);
  private:
  float _internal_closeprice() const;
  void _internal_set_closeprice(float value);
  public:

  // float SettlementPrice = 16;
  void clear_settlementprice();
  float settlementprice() const;
  void set_settlementprice(float value);
  private:
  float _internal_settlementprice() const;
  void _internal_set_settlementprice(float value);
  public:

  // float UpperLimitPrice = 17;
  void clear_upperlimitprice();
  float upperlimitprice() const;
  void set_upperlimitprice(float value);
  private:
  float _internal_upperlimitprice() const;
  void _internal_set_upperlimitprice(float value);
  public:

  // float LowerLimitPrice = 18;
  void clear_lowerlimitprice();
  float lowerlimitprice() const;
  void set_lowerlimitprice(float value);
  private:
  float _internal_lowerlimitprice() const;
  void _internal_set_lowerlimitprice(float value);
  public:

  // double PreDelta = 19;
  void clear_predelta();
  double predelta() const;
  void set_predelta(double value);
  private:
  double _internal_predelta() const;
  void _internal_set_predelta(double value);
  public:

  // double CurrDelta = 20;
  void clear_currdelta();
  double currdelta() const;
  void set_currdelta(double value);
  private:
  double _internal_currdelta() const;
  void _internal_set_currdelta(double value);
  public:

  // int32 UpdateMillisec = 22;
  void clear_updatemillisec();
  int32_t updatemillisec() const;
  void set_updatemillisec(int32_t value);
  private:
  int32_t _internal_updatemillisec() const;
  void _internal_set_updatemillisec(int32_t value);
  public:

  // float BidPrice1 = 23;
  void clear_bidprice1();
  float bidprice1() const;
  void set_bidprice1(float value);
  private:
  float _internal_bidprice1() const;
  void _internal_set_bidprice1(float value);
  public:

  // int32 BidVolume1 = 24;
  void clear_bidvolume1();
  int32_t bidvolume1() const;
  void set_bidvolume1(int32_t value);
  private:
  int32_t _internal_bidvolume1() const;
  void _internal_set_bidvolume1(int32_t value);
  public:

  // float AskPrice1 = 25;
  void clear_askprice1();
  float askprice1() const;
  void set_askprice1(float value);
  private:
  float _internal_askprice1() const;
  void _internal_set_askprice1(float value);
  public:

  // int32 AskVolume1 = 26;
  void clear_askvolume1();
  int32_t askvolume1() const;
  void set_askvolume1(int32_t value);
  private:
  int32_t _internal_askvolume1() const;
  void _internal_set_askvolume1(int32_t value);
  public:

  // float BidPrice2 = 27;
  void clear_bidprice2();
  float bidprice2() const;
  void set_bidprice2(float value);
  private:
  float _internal_bidprice2() const;
  void _internal_set_bidprice2(float value);
  public:

  // int32 BidVolume2 = 28;
  void clear_bidvolume2();
  int32_t bidvolume2() const;
  void set_bidvolume2(int32_t value);
  private:
  int32_t _internal_bidvolume2() const;
  void _internal_set_bidvolume2(int32_t value);
  public:

  // float AskPrice2 = 29;
  void clear_askprice2();
  float askprice2() const;
  void set_askprice2(float value);
  private:
  float _internal_askprice2() const;
  void _internal_set_askprice2(float value);
  public:

  // int32 AskVolume2 = 30;
  void clear_askvolume2();
  int32_t askvolume2() const;
  void set_askvolume2(int32_t value);
  private:
  int32_t _internal_askvolume2() const;
  void _internal_set_askvolume2(int32_t value);
  public:

  // float BidPrice3 = 31;
  void clear_bidprice3();
  float bidprice3() const;
  void set_bidprice3(float value);
  private:
  float _internal_bidprice3() const;
  void _internal_set_bidprice3(float value);
  public:

  // int32 BidVolume3 = 32;
  void clear_bidvolume3();
  int32_t bidvolume3() const;
  void set_bidvolume3(int32_t value);
  private:
  int32_t _internal_bidvolume3() const;
  void _internal_set_bidvolume3(int32_t value);
  public:

  // float AskPrice3 = 33;
  void clear_askprice3();
  float askprice3() const;
  void set_askprice3(float value);
  private:
  float _internal_askprice3() const;
  void _internal_set_askprice3(float value);
  public:

  // int32 AskVolume3 = 34;
  void clear_askvolume3();
  int32_t askvolume3() const;
  void set_askvolume3(int32_t value);
  private:
  int32_t _internal_askvolume3() const;
  void _internal_set_askvolume3(int32_t value);
  public:

  // float BidPrice4 = 35;
  void clear_bidprice4();
  float bidprice4() const;
  void set_bidprice4(float value);
  private:
  float _internal_bidprice4() const;
  void _internal_set_bidprice4(float value);
  public:

  // int32 BidVolume4 = 36;
  void clear_bidvolume4();
  int32_t bidvolume4() const;
  void set_bidvolume4(int32_t value);
  private:
  int32_t _internal_bidvolume4() const;
  void _internal_set_bidvolume4(int32_t value);
  public:

  // float AskPrice4 = 37;
  void clear_askprice4();
  float askprice4() const;
  void set_askprice4(float value);
  private:
  float _internal_askprice4() const;
  void _internal_set_askprice4(float value);
  public:

  // int32 AskVolume4 = 38;
  void clear_askvolume4();
  int32_t askvolume4() const;
  void set_askvolume4(int32_t value);
  private:
  int32_t _internal_askvolume4() const;
  void _internal_set_askvolume4(int32_t value);
  public:

  // float BidPrice5 = 39;
  void clear_bidprice5();
  float bidprice5() const;
  void set_bidprice5(float value);
  private:
  float _internal_bidprice5() const;
  void _internal_set_bidprice5(float value);
  public:

  // int32 BidVolume5 = 40;
  void clear_bidvolume5();
  int32_t bidvolume5() const;
  void set_bidvolume5(int32_t value);
  private:
  int32_t _internal_bidvolume5() const;
  void _internal_set_bidvolume5(int32_t value);
  public:

  // float AskPrice5 = 42;
  void clear_askprice5();
  float askprice5() const;
  void set_askprice5(float value);
  private:
  float _internal_askprice5() const;
  void _internal_set_askprice5(float value);
  public:

  // int32 AskVolume5 = 43;
  void clear_askvolume5();
  int32_t askvolume5() const;
  void set_askvolume5(int32_t value);
  private:
  int32_t _internal_askvolume5() const;
  void _internal_set_askvolume5(int32_t value);
  public:

  // float AveragePrice = 44;
  void clear_averageprice();
  float averageprice() const;
  void set_averageprice(float value);
  private:
  float _internal_averageprice() const;
  void _internal_set_averageprice(float value);
  public:

  // @@protoc_insertion_point(class_scope:dat.TickData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingday_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangeinstid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actionday_;
  float lastprice_;
  float presettlementprice_;
  float precloseprice_;
  float preopeninterest_;
  float openprice_;
  float highestprice_;
  float lowestprice_;
  int32_t volume_;
  double turnover_;
  double openinterest_;
  float closeprice_;
  float settlementprice_;
  float upperlimitprice_;
  float lowerlimitprice_;
  double predelta_;
  double currdelta_;
  int32_t updatemillisec_;
  float bidprice1_;
  int32_t bidvolume1_;
  float askprice1_;
  int32_t askvolume1_;
  float bidprice2_;
  int32_t bidvolume2_;
  float askprice2_;
  int32_t askvolume2_;
  float bidprice3_;
  int32_t bidvolume3_;
  float askprice3_;
  int32_t askvolume3_;
  float bidprice4_;
  int32_t bidvolume4_;
  float askprice4_;
  int32_t askvolume4_;
  float bidprice5_;
  int32_t bidvolume5_;
  float askprice5_;
  int32_t askvolume5_;
  float averageprice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tick_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TickData

// string TradingDay = 1;
inline void TickData::clear_tradingday() {
  tradingday_.ClearToEmpty();
}
inline const std::string& TickData::tradingday() const {
  // @@protoc_insertion_point(field_get:dat.TickData.TradingDay)
  return _internal_tradingday();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickData::set_tradingday(ArgT0&& arg0, ArgT... args) {
 
 tradingday_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dat.TickData.TradingDay)
}
inline std::string* TickData::mutable_tradingday() {
  std::string* _s = _internal_mutable_tradingday();
  // @@protoc_insertion_point(field_mutable:dat.TickData.TradingDay)
  return _s;
}
inline const std::string& TickData::_internal_tradingday() const {
  return tradingday_.Get();
}
inline void TickData::_internal_set_tradingday(const std::string& value) {
  
  tradingday_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickData::_internal_mutable_tradingday() {
  
  return tradingday_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickData::release_tradingday() {
  // @@protoc_insertion_point(field_release:dat.TickData.TradingDay)
  return tradingday_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickData::set_allocated_tradingday(std::string* tradingday) {
  if (tradingday != nullptr) {
    
  } else {
    
  }
  tradingday_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingday,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tradingday_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tradingday_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dat.TickData.TradingDay)
}

// string InstrumentID = 2;
inline void TickData::clear_instrumentid() {
  instrumentid_.ClearToEmpty();
}
inline const std::string& TickData::instrumentid() const {
  // @@protoc_insertion_point(field_get:dat.TickData.InstrumentID)
  return _internal_instrumentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickData::set_instrumentid(ArgT0&& arg0, ArgT... args) {
 
 instrumentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dat.TickData.InstrumentID)
}
inline std::string* TickData::mutable_instrumentid() {
  std::string* _s = _internal_mutable_instrumentid();
  // @@protoc_insertion_point(field_mutable:dat.TickData.InstrumentID)
  return _s;
}
inline const std::string& TickData::_internal_instrumentid() const {
  return instrumentid_.Get();
}
inline void TickData::_internal_set_instrumentid(const std::string& value) {
  
  instrumentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickData::_internal_mutable_instrumentid() {
  
  return instrumentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickData::release_instrumentid() {
  // @@protoc_insertion_point(field_release:dat.TickData.InstrumentID)
  return instrumentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickData::set_allocated_instrumentid(std::string* instrumentid) {
  if (instrumentid != nullptr) {
    
  } else {
    
  }
  instrumentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrumentid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrumentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dat.TickData.InstrumentID)
}

// string ExchangeID = 3;
inline void TickData::clear_exchangeid() {
  exchangeid_.ClearToEmpty();
}
inline const std::string& TickData::exchangeid() const {
  // @@protoc_insertion_point(field_get:dat.TickData.ExchangeID)
  return _internal_exchangeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickData::set_exchangeid(ArgT0&& arg0, ArgT... args) {
 
 exchangeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dat.TickData.ExchangeID)
}
inline std::string* TickData::mutable_exchangeid() {
  std::string* _s = _internal_mutable_exchangeid();
  // @@protoc_insertion_point(field_mutable:dat.TickData.ExchangeID)
  return _s;
}
inline const std::string& TickData::_internal_exchangeid() const {
  return exchangeid_.Get();
}
inline void TickData::_internal_set_exchangeid(const std::string& value) {
  
  exchangeid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickData::_internal_mutable_exchangeid() {
  
  return exchangeid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickData::release_exchangeid() {
  // @@protoc_insertion_point(field_release:dat.TickData.ExchangeID)
  return exchangeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickData::set_allocated_exchangeid(std::string* exchangeid) {
  if (exchangeid != nullptr) {
    
  } else {
    
  }
  exchangeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangeid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchangeid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchangeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dat.TickData.ExchangeID)
}

// string ExchangeInstID = 4;
inline void TickData::clear_exchangeinstid() {
  exchangeinstid_.ClearToEmpty();
}
inline const std::string& TickData::exchangeinstid() const {
  // @@protoc_insertion_point(field_get:dat.TickData.ExchangeInstID)
  return _internal_exchangeinstid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickData::set_exchangeinstid(ArgT0&& arg0, ArgT... args) {
 
 exchangeinstid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dat.TickData.ExchangeInstID)
}
inline std::string* TickData::mutable_exchangeinstid() {
  std::string* _s = _internal_mutable_exchangeinstid();
  // @@protoc_insertion_point(field_mutable:dat.TickData.ExchangeInstID)
  return _s;
}
inline const std::string& TickData::_internal_exchangeinstid() const {
  return exchangeinstid_.Get();
}
inline void TickData::_internal_set_exchangeinstid(const std::string& value) {
  
  exchangeinstid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickData::_internal_mutable_exchangeinstid() {
  
  return exchangeinstid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickData::release_exchangeinstid() {
  // @@protoc_insertion_point(field_release:dat.TickData.ExchangeInstID)
  return exchangeinstid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickData::set_allocated_exchangeinstid(std::string* exchangeinstid) {
  if (exchangeinstid != nullptr) {
    
  } else {
    
  }
  exchangeinstid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangeinstid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchangeinstid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchangeinstid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dat.TickData.ExchangeInstID)
}

// float LastPrice = 5;
inline void TickData::clear_lastprice() {
  lastprice_ = 0;
}
inline float TickData::_internal_lastprice() const {
  return lastprice_;
}
inline float TickData::lastprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.LastPrice)
  return _internal_lastprice();
}
inline void TickData::_internal_set_lastprice(float value) {
  
  lastprice_ = value;
}
inline void TickData::set_lastprice(float value) {
  _internal_set_lastprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.LastPrice)
}

// float PreSettlementPrice = 6;
inline void TickData::clear_presettlementprice() {
  presettlementprice_ = 0;
}
inline float TickData::_internal_presettlementprice() const {
  return presettlementprice_;
}
inline float TickData::presettlementprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.PreSettlementPrice)
  return _internal_presettlementprice();
}
inline void TickData::_internal_set_presettlementprice(float value) {
  
  presettlementprice_ = value;
}
inline void TickData::set_presettlementprice(float value) {
  _internal_set_presettlementprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.PreSettlementPrice)
}

// float PreClosePrice = 7;
inline void TickData::clear_precloseprice() {
  precloseprice_ = 0;
}
inline float TickData::_internal_precloseprice() const {
  return precloseprice_;
}
inline float TickData::precloseprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.PreClosePrice)
  return _internal_precloseprice();
}
inline void TickData::_internal_set_precloseprice(float value) {
  
  precloseprice_ = value;
}
inline void TickData::set_precloseprice(float value) {
  _internal_set_precloseprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.PreClosePrice)
}

// float PreOpenInterest = 8;
inline void TickData::clear_preopeninterest() {
  preopeninterest_ = 0;
}
inline float TickData::_internal_preopeninterest() const {
  return preopeninterest_;
}
inline float TickData::preopeninterest() const {
  // @@protoc_insertion_point(field_get:dat.TickData.PreOpenInterest)
  return _internal_preopeninterest();
}
inline void TickData::_internal_set_preopeninterest(float value) {
  
  preopeninterest_ = value;
}
inline void TickData::set_preopeninterest(float value) {
  _internal_set_preopeninterest(value);
  // @@protoc_insertion_point(field_set:dat.TickData.PreOpenInterest)
}

// float OpenPrice = 9;
inline void TickData::clear_openprice() {
  openprice_ = 0;
}
inline float TickData::_internal_openprice() const {
  return openprice_;
}
inline float TickData::openprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.OpenPrice)
  return _internal_openprice();
}
inline void TickData::_internal_set_openprice(float value) {
  
  openprice_ = value;
}
inline void TickData::set_openprice(float value) {
  _internal_set_openprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.OpenPrice)
}

// float HighestPrice = 10;
inline void TickData::clear_highestprice() {
  highestprice_ = 0;
}
inline float TickData::_internal_highestprice() const {
  return highestprice_;
}
inline float TickData::highestprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.HighestPrice)
  return _internal_highestprice();
}
inline void TickData::_internal_set_highestprice(float value) {
  
  highestprice_ = value;
}
inline void TickData::set_highestprice(float value) {
  _internal_set_highestprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.HighestPrice)
}

// float LowestPrice = 11;
inline void TickData::clear_lowestprice() {
  lowestprice_ = 0;
}
inline float TickData::_internal_lowestprice() const {
  return lowestprice_;
}
inline float TickData::lowestprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.LowestPrice)
  return _internal_lowestprice();
}
inline void TickData::_internal_set_lowestprice(float value) {
  
  lowestprice_ = value;
}
inline void TickData::set_lowestprice(float value) {
  _internal_set_lowestprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.LowestPrice)
}

// int32 Volume = 12;
inline void TickData::clear_volume() {
  volume_ = 0;
}
inline int32_t TickData::_internal_volume() const {
  return volume_;
}
inline int32_t TickData::volume() const {
  // @@protoc_insertion_point(field_get:dat.TickData.Volume)
  return _internal_volume();
}
inline void TickData::_internal_set_volume(int32_t value) {
  
  volume_ = value;
}
inline void TickData::set_volume(int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:dat.TickData.Volume)
}

// double Turnover = 13;
inline void TickData::clear_turnover() {
  turnover_ = 0;
}
inline double TickData::_internal_turnover() const {
  return turnover_;
}
inline double TickData::turnover() const {
  // @@protoc_insertion_point(field_get:dat.TickData.Turnover)
  return _internal_turnover();
}
inline void TickData::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void TickData::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:dat.TickData.Turnover)
}

// double OpenInterest = 14;
inline void TickData::clear_openinterest() {
  openinterest_ = 0;
}
inline double TickData::_internal_openinterest() const {
  return openinterest_;
}
inline double TickData::openinterest() const {
  // @@protoc_insertion_point(field_get:dat.TickData.OpenInterest)
  return _internal_openinterest();
}
inline void TickData::_internal_set_openinterest(double value) {
  
  openinterest_ = value;
}
inline void TickData::set_openinterest(double value) {
  _internal_set_openinterest(value);
  // @@protoc_insertion_point(field_set:dat.TickData.OpenInterest)
}

// float ClosePrice = 15;
inline void TickData::clear_closeprice() {
  closeprice_ = 0;
}
inline float TickData::_internal_closeprice() const {
  return closeprice_;
}
inline float TickData::closeprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.ClosePrice)
  return _internal_closeprice();
}
inline void TickData::_internal_set_closeprice(float value) {
  
  closeprice_ = value;
}
inline void TickData::set_closeprice(float value) {
  _internal_set_closeprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.ClosePrice)
}

// float SettlementPrice = 16;
inline void TickData::clear_settlementprice() {
  settlementprice_ = 0;
}
inline float TickData::_internal_settlementprice() const {
  return settlementprice_;
}
inline float TickData::settlementprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.SettlementPrice)
  return _internal_settlementprice();
}
inline void TickData::_internal_set_settlementprice(float value) {
  
  settlementprice_ = value;
}
inline void TickData::set_settlementprice(float value) {
  _internal_set_settlementprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.SettlementPrice)
}

// float UpperLimitPrice = 17;
inline void TickData::clear_upperlimitprice() {
  upperlimitprice_ = 0;
}
inline float TickData::_internal_upperlimitprice() const {
  return upperlimitprice_;
}
inline float TickData::upperlimitprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.UpperLimitPrice)
  return _internal_upperlimitprice();
}
inline void TickData::_internal_set_upperlimitprice(float value) {
  
  upperlimitprice_ = value;
}
inline void TickData::set_upperlimitprice(float value) {
  _internal_set_upperlimitprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.UpperLimitPrice)
}

// float LowerLimitPrice = 18;
inline void TickData::clear_lowerlimitprice() {
  lowerlimitprice_ = 0;
}
inline float TickData::_internal_lowerlimitprice() const {
  return lowerlimitprice_;
}
inline float TickData::lowerlimitprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.LowerLimitPrice)
  return _internal_lowerlimitprice();
}
inline void TickData::_internal_set_lowerlimitprice(float value) {
  
  lowerlimitprice_ = value;
}
inline void TickData::set_lowerlimitprice(float value) {
  _internal_set_lowerlimitprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.LowerLimitPrice)
}

// double PreDelta = 19;
inline void TickData::clear_predelta() {
  predelta_ = 0;
}
inline double TickData::_internal_predelta() const {
  return predelta_;
}
inline double TickData::predelta() const {
  // @@protoc_insertion_point(field_get:dat.TickData.PreDelta)
  return _internal_predelta();
}
inline void TickData::_internal_set_predelta(double value) {
  
  predelta_ = value;
}
inline void TickData::set_predelta(double value) {
  _internal_set_predelta(value);
  // @@protoc_insertion_point(field_set:dat.TickData.PreDelta)
}

// double CurrDelta = 20;
inline void TickData::clear_currdelta() {
  currdelta_ = 0;
}
inline double TickData::_internal_currdelta() const {
  return currdelta_;
}
inline double TickData::currdelta() const {
  // @@protoc_insertion_point(field_get:dat.TickData.CurrDelta)
  return _internal_currdelta();
}
inline void TickData::_internal_set_currdelta(double value) {
  
  currdelta_ = value;
}
inline void TickData::set_currdelta(double value) {
  _internal_set_currdelta(value);
  // @@protoc_insertion_point(field_set:dat.TickData.CurrDelta)
}

// string UpdateTime = 21;
inline void TickData::clear_updatetime() {
  updatetime_.ClearToEmpty();
}
inline const std::string& TickData::updatetime() const {
  // @@protoc_insertion_point(field_get:dat.TickData.UpdateTime)
  return _internal_updatetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickData::set_updatetime(ArgT0&& arg0, ArgT... args) {
 
 updatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dat.TickData.UpdateTime)
}
inline std::string* TickData::mutable_updatetime() {
  std::string* _s = _internal_mutable_updatetime();
  // @@protoc_insertion_point(field_mutable:dat.TickData.UpdateTime)
  return _s;
}
inline const std::string& TickData::_internal_updatetime() const {
  return updatetime_.Get();
}
inline void TickData::_internal_set_updatetime(const std::string& value) {
  
  updatetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickData::_internal_mutable_updatetime() {
  
  return updatetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickData::release_updatetime() {
  // @@protoc_insertion_point(field_release:dat.TickData.UpdateTime)
  return updatetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickData::set_allocated_updatetime(std::string* updatetime) {
  if (updatetime != nullptr) {
    
  } else {
    
  }
  updatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatetime,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (updatetime_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    updatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dat.TickData.UpdateTime)
}

// int32 UpdateMillisec = 22;
inline void TickData::clear_updatemillisec() {
  updatemillisec_ = 0;
}
inline int32_t TickData::_internal_updatemillisec() const {
  return updatemillisec_;
}
inline int32_t TickData::updatemillisec() const {
  // @@protoc_insertion_point(field_get:dat.TickData.UpdateMillisec)
  return _internal_updatemillisec();
}
inline void TickData::_internal_set_updatemillisec(int32_t value) {
  
  updatemillisec_ = value;
}
inline void TickData::set_updatemillisec(int32_t value) {
  _internal_set_updatemillisec(value);
  // @@protoc_insertion_point(field_set:dat.TickData.UpdateMillisec)
}

// float BidPrice1 = 23;
inline void TickData::clear_bidprice1() {
  bidprice1_ = 0;
}
inline float TickData::_internal_bidprice1() const {
  return bidprice1_;
}
inline float TickData::bidprice1() const {
  // @@protoc_insertion_point(field_get:dat.TickData.BidPrice1)
  return _internal_bidprice1();
}
inline void TickData::_internal_set_bidprice1(float value) {
  
  bidprice1_ = value;
}
inline void TickData::set_bidprice1(float value) {
  _internal_set_bidprice1(value);
  // @@protoc_insertion_point(field_set:dat.TickData.BidPrice1)
}

// int32 BidVolume1 = 24;
inline void TickData::clear_bidvolume1() {
  bidvolume1_ = 0;
}
inline int32_t TickData::_internal_bidvolume1() const {
  return bidvolume1_;
}
inline int32_t TickData::bidvolume1() const {
  // @@protoc_insertion_point(field_get:dat.TickData.BidVolume1)
  return _internal_bidvolume1();
}
inline void TickData::_internal_set_bidvolume1(int32_t value) {
  
  bidvolume1_ = value;
}
inline void TickData::set_bidvolume1(int32_t value) {
  _internal_set_bidvolume1(value);
  // @@protoc_insertion_point(field_set:dat.TickData.BidVolume1)
}

// float AskPrice1 = 25;
inline void TickData::clear_askprice1() {
  askprice1_ = 0;
}
inline float TickData::_internal_askprice1() const {
  return askprice1_;
}
inline float TickData::askprice1() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AskPrice1)
  return _internal_askprice1();
}
inline void TickData::_internal_set_askprice1(float value) {
  
  askprice1_ = value;
}
inline void TickData::set_askprice1(float value) {
  _internal_set_askprice1(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AskPrice1)
}

// int32 AskVolume1 = 26;
inline void TickData::clear_askvolume1() {
  askvolume1_ = 0;
}
inline int32_t TickData::_internal_askvolume1() const {
  return askvolume1_;
}
inline int32_t TickData::askvolume1() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AskVolume1)
  return _internal_askvolume1();
}
inline void TickData::_internal_set_askvolume1(int32_t value) {
  
  askvolume1_ = value;
}
inline void TickData::set_askvolume1(int32_t value) {
  _internal_set_askvolume1(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AskVolume1)
}

// float BidPrice2 = 27;
inline void TickData::clear_bidprice2() {
  bidprice2_ = 0;
}
inline float TickData::_internal_bidprice2() const {
  return bidprice2_;
}
inline float TickData::bidprice2() const {
  // @@protoc_insertion_point(field_get:dat.TickData.BidPrice2)
  return _internal_bidprice2();
}
inline void TickData::_internal_set_bidprice2(float value) {
  
  bidprice2_ = value;
}
inline void TickData::set_bidprice2(float value) {
  _internal_set_bidprice2(value);
  // @@protoc_insertion_point(field_set:dat.TickData.BidPrice2)
}

// int32 BidVolume2 = 28;
inline void TickData::clear_bidvolume2() {
  bidvolume2_ = 0;
}
inline int32_t TickData::_internal_bidvolume2() const {
  return bidvolume2_;
}
inline int32_t TickData::bidvolume2() const {
  // @@protoc_insertion_point(field_get:dat.TickData.BidVolume2)
  return _internal_bidvolume2();
}
inline void TickData::_internal_set_bidvolume2(int32_t value) {
  
  bidvolume2_ = value;
}
inline void TickData::set_bidvolume2(int32_t value) {
  _internal_set_bidvolume2(value);
  // @@protoc_insertion_point(field_set:dat.TickData.BidVolume2)
}

// float AskPrice2 = 29;
inline void TickData::clear_askprice2() {
  askprice2_ = 0;
}
inline float TickData::_internal_askprice2() const {
  return askprice2_;
}
inline float TickData::askprice2() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AskPrice2)
  return _internal_askprice2();
}
inline void TickData::_internal_set_askprice2(float value) {
  
  askprice2_ = value;
}
inline void TickData::set_askprice2(float value) {
  _internal_set_askprice2(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AskPrice2)
}

// int32 AskVolume2 = 30;
inline void TickData::clear_askvolume2() {
  askvolume2_ = 0;
}
inline int32_t TickData::_internal_askvolume2() const {
  return askvolume2_;
}
inline int32_t TickData::askvolume2() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AskVolume2)
  return _internal_askvolume2();
}
inline void TickData::_internal_set_askvolume2(int32_t value) {
  
  askvolume2_ = value;
}
inline void TickData::set_askvolume2(int32_t value) {
  _internal_set_askvolume2(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AskVolume2)
}

// float BidPrice3 = 31;
inline void TickData::clear_bidprice3() {
  bidprice3_ = 0;
}
inline float TickData::_internal_bidprice3() const {
  return bidprice3_;
}
inline float TickData::bidprice3() const {
  // @@protoc_insertion_point(field_get:dat.TickData.BidPrice3)
  return _internal_bidprice3();
}
inline void TickData::_internal_set_bidprice3(float value) {
  
  bidprice3_ = value;
}
inline void TickData::set_bidprice3(float value) {
  _internal_set_bidprice3(value);
  // @@protoc_insertion_point(field_set:dat.TickData.BidPrice3)
}

// int32 BidVolume3 = 32;
inline void TickData::clear_bidvolume3() {
  bidvolume3_ = 0;
}
inline int32_t TickData::_internal_bidvolume3() const {
  return bidvolume3_;
}
inline int32_t TickData::bidvolume3() const {
  // @@protoc_insertion_point(field_get:dat.TickData.BidVolume3)
  return _internal_bidvolume3();
}
inline void TickData::_internal_set_bidvolume3(int32_t value) {
  
  bidvolume3_ = value;
}
inline void TickData::set_bidvolume3(int32_t value) {
  _internal_set_bidvolume3(value);
  // @@protoc_insertion_point(field_set:dat.TickData.BidVolume3)
}

// float AskPrice3 = 33;
inline void TickData::clear_askprice3() {
  askprice3_ = 0;
}
inline float TickData::_internal_askprice3() const {
  return askprice3_;
}
inline float TickData::askprice3() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AskPrice3)
  return _internal_askprice3();
}
inline void TickData::_internal_set_askprice3(float value) {
  
  askprice3_ = value;
}
inline void TickData::set_askprice3(float value) {
  _internal_set_askprice3(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AskPrice3)
}

// int32 AskVolume3 = 34;
inline void TickData::clear_askvolume3() {
  askvolume3_ = 0;
}
inline int32_t TickData::_internal_askvolume3() const {
  return askvolume3_;
}
inline int32_t TickData::askvolume3() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AskVolume3)
  return _internal_askvolume3();
}
inline void TickData::_internal_set_askvolume3(int32_t value) {
  
  askvolume3_ = value;
}
inline void TickData::set_askvolume3(int32_t value) {
  _internal_set_askvolume3(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AskVolume3)
}

// float BidPrice4 = 35;
inline void TickData::clear_bidprice4() {
  bidprice4_ = 0;
}
inline float TickData::_internal_bidprice4() const {
  return bidprice4_;
}
inline float TickData::bidprice4() const {
  // @@protoc_insertion_point(field_get:dat.TickData.BidPrice4)
  return _internal_bidprice4();
}
inline void TickData::_internal_set_bidprice4(float value) {
  
  bidprice4_ = value;
}
inline void TickData::set_bidprice4(float value) {
  _internal_set_bidprice4(value);
  // @@protoc_insertion_point(field_set:dat.TickData.BidPrice4)
}

// int32 BidVolume4 = 36;
inline void TickData::clear_bidvolume4() {
  bidvolume4_ = 0;
}
inline int32_t TickData::_internal_bidvolume4() const {
  return bidvolume4_;
}
inline int32_t TickData::bidvolume4() const {
  // @@protoc_insertion_point(field_get:dat.TickData.BidVolume4)
  return _internal_bidvolume4();
}
inline void TickData::_internal_set_bidvolume4(int32_t value) {
  
  bidvolume4_ = value;
}
inline void TickData::set_bidvolume4(int32_t value) {
  _internal_set_bidvolume4(value);
  // @@protoc_insertion_point(field_set:dat.TickData.BidVolume4)
}

// float AskPrice4 = 37;
inline void TickData::clear_askprice4() {
  askprice4_ = 0;
}
inline float TickData::_internal_askprice4() const {
  return askprice4_;
}
inline float TickData::askprice4() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AskPrice4)
  return _internal_askprice4();
}
inline void TickData::_internal_set_askprice4(float value) {
  
  askprice4_ = value;
}
inline void TickData::set_askprice4(float value) {
  _internal_set_askprice4(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AskPrice4)
}

// int32 AskVolume4 = 38;
inline void TickData::clear_askvolume4() {
  askvolume4_ = 0;
}
inline int32_t TickData::_internal_askvolume4() const {
  return askvolume4_;
}
inline int32_t TickData::askvolume4() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AskVolume4)
  return _internal_askvolume4();
}
inline void TickData::_internal_set_askvolume4(int32_t value) {
  
  askvolume4_ = value;
}
inline void TickData::set_askvolume4(int32_t value) {
  _internal_set_askvolume4(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AskVolume4)
}

// float BidPrice5 = 39;
inline void TickData::clear_bidprice5() {
  bidprice5_ = 0;
}
inline float TickData::_internal_bidprice5() const {
  return bidprice5_;
}
inline float TickData::bidprice5() const {
  // @@protoc_insertion_point(field_get:dat.TickData.BidPrice5)
  return _internal_bidprice5();
}
inline void TickData::_internal_set_bidprice5(float value) {
  
  bidprice5_ = value;
}
inline void TickData::set_bidprice5(float value) {
  _internal_set_bidprice5(value);
  // @@protoc_insertion_point(field_set:dat.TickData.BidPrice5)
}

// int32 BidVolume5 = 40;
inline void TickData::clear_bidvolume5() {
  bidvolume5_ = 0;
}
inline int32_t TickData::_internal_bidvolume5() const {
  return bidvolume5_;
}
inline int32_t TickData::bidvolume5() const {
  // @@protoc_insertion_point(field_get:dat.TickData.BidVolume5)
  return _internal_bidvolume5();
}
inline void TickData::_internal_set_bidvolume5(int32_t value) {
  
  bidvolume5_ = value;
}
inline void TickData::set_bidvolume5(int32_t value) {
  _internal_set_bidvolume5(value);
  // @@protoc_insertion_point(field_set:dat.TickData.BidVolume5)
}

// float AskPrice5 = 42;
inline void TickData::clear_askprice5() {
  askprice5_ = 0;
}
inline float TickData::_internal_askprice5() const {
  return askprice5_;
}
inline float TickData::askprice5() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AskPrice5)
  return _internal_askprice5();
}
inline void TickData::_internal_set_askprice5(float value) {
  
  askprice5_ = value;
}
inline void TickData::set_askprice5(float value) {
  _internal_set_askprice5(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AskPrice5)
}

// int32 AskVolume5 = 43;
inline void TickData::clear_askvolume5() {
  askvolume5_ = 0;
}
inline int32_t TickData::_internal_askvolume5() const {
  return askvolume5_;
}
inline int32_t TickData::askvolume5() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AskVolume5)
  return _internal_askvolume5();
}
inline void TickData::_internal_set_askvolume5(int32_t value) {
  
  askvolume5_ = value;
}
inline void TickData::set_askvolume5(int32_t value) {
  _internal_set_askvolume5(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AskVolume5)
}

// float AveragePrice = 44;
inline void TickData::clear_averageprice() {
  averageprice_ = 0;
}
inline float TickData::_internal_averageprice() const {
  return averageprice_;
}
inline float TickData::averageprice() const {
  // @@protoc_insertion_point(field_get:dat.TickData.AveragePrice)
  return _internal_averageprice();
}
inline void TickData::_internal_set_averageprice(float value) {
  
  averageprice_ = value;
}
inline void TickData::set_averageprice(float value) {
  _internal_set_averageprice(value);
  // @@protoc_insertion_point(field_set:dat.TickData.AveragePrice)
}

// string ActionDay = 45;
inline void TickData::clear_actionday() {
  actionday_.ClearToEmpty();
}
inline const std::string& TickData::actionday() const {
  // @@protoc_insertion_point(field_get:dat.TickData.ActionDay)
  return _internal_actionday();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickData::set_actionday(ArgT0&& arg0, ArgT... args) {
 
 actionday_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dat.TickData.ActionDay)
}
inline std::string* TickData::mutable_actionday() {
  std::string* _s = _internal_mutable_actionday();
  // @@protoc_insertion_point(field_mutable:dat.TickData.ActionDay)
  return _s;
}
inline const std::string& TickData::_internal_actionday() const {
  return actionday_.Get();
}
inline void TickData::_internal_set_actionday(const std::string& value) {
  
  actionday_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickData::_internal_mutable_actionday() {
  
  return actionday_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickData::release_actionday() {
  // @@protoc_insertion_point(field_release:dat.TickData.ActionDay)
  return actionday_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickData::set_allocated_actionday(std::string* actionday) {
  if (actionday != nullptr) {
    
  } else {
    
  }
  actionday_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actionday,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (actionday_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    actionday_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dat.TickData.ActionDay)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tick_2eproto
